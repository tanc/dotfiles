#
# .zshrc is sourced in interactive shells.
# It should contain commands to set up aliases,
# functions, options, key bindings, etc.
#

autoload -U compinit
compinit

#allow tab completion in the middle of a word
setopt COMPLETE_IN_WORD

## keep background processes at full speed
#setopt NOBGNICE
## restart running processes on exit
#setopt HUP

## history
setopt APPEND_HISTORY
## for sharing history between zsh processes
setopt INC_APPEND_HISTORY
setopt SHARE_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS
setopt EXTENDED_HISTORY

HISTFILE=~/.zsh_history
HISTSIZE=500000
SAVEHIST=500000
HIST_STAMPS="yyyy-mm-dd"

## never ever beep ever
setopt NO_BEEP
#eval "$(zoxide init zsh)"

z() {
  local old_pwd="$PWD"
  local new_pwd
  
  # Handle special cases and existing paths directly
  if [[ "$1" == ".." || "$1" == "-" || -d "$1" ]]; then
    cd "$@" || return
  # Check if the path exists relative to any parent directory
  elif [[ -d "$HOME/$1" ]]; then
    cd "$HOME/$1" || return
  elif [[ -d "$PWD/../$1" ]]; then
    cd "$PWD/../$1" || return
  # Check if it exists in common directories
  elif [[ -d "$HOME/Sites/$1" ]]; then
    cd "$HOME/Sites/$1" || return
  else
    # Fall back to zoxide for directory jumping
    local target
    target="$(zoxide query -- "$@")" || return
    cd "$target" || return
  fi
  
  # Update zoxide database with the new directory
  new_pwd="$PWD"
  if [[ "$old_pwd" != "$new_pwd" ]]; then
    zoxide add "$new_pwd"
  fi
}

## automatically decide when to page a list of completions
#LISTMAX=0

## disable mail checking
#MAILCHECK=0

path+=('/var/home/tanc/.cargo/bin')
path+=('/var/home/tanc/.config/composer/vendor/bin')
path+=('/var/home/tanc/.local/opt')
path+=('/var/home/tanc/.local/bin')

# aliases
alias ll="eza -lagmF --icons=always --color-scale=age -o --no-permissions --git"
alias rg='rg --hidden --no-follow --max-columns 255 --no-heading --column -F'
alias dc="docker compose"
alias vi="nvim"
alias vim="nvim"
alias gfuz='git ls-files -m -o --exclude-standard | fzf --print0 -m -1 | xargs -0 -t -r'
alias ask="llm"
alias ask-local="llm -m qwen2.5:7b"
alias ask-code="llm -m openrouter/qwen/qwen-2.5-coder-32b-instruct"
alias history="history -t '%Y-%m-%d'"
alias docker-compose="docker compose"
alias rm=/var/home/tanc/.local/bin/rm.sh
alias ..="cd .."

# aliases that rely on installed commands
if command -v z > /dev/null 2>&1; then
  alias cd="z"
fi

ga(){
  if [ $# -eq 0 ]; then
    gfuz git add
  else
    git add "$@"
  fi
}

export VISUAL=nvim
export EDITOR="$VISUAL"
export LUMEN_AI_PROVIDER="ollama"
# export LUMEN_AI_MODEL="qwen2.5-coder:7b"
export LUMEN_AI_MODEL="phi4-mini:latest"

# kitty ssh fix
[[ "$TERM" == "xterm-kitty" ]] && alias ssh="TERM=xterm-256color ssh" 

export NVM_DIR="$HOME/.nvm"
  [ -s "/home/linuxbrew/.linuxbrew/opt/nvm/nvm.sh" ] && \. "/home/linuxbrew/.linuxbrew/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/home/linuxbrew/.linuxbrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/home/linuxbrew/.linuxbrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# autoload -U colors
#colors

for config_file in "$HOME/.config/zsh/functions/"*.zsh; do
  if [[ -f "$config_file" ]]; then
    source "$config_file"
  fi
done

if [[ -f "/home/tanc/.config/zsh/vendor-completions/_ddev/ddev_zsh_completion.sh" ]]; then
  source /home/tanc/.config/zsh/vendor-completions/_ddev/ddev_zsh_completion.sh
fi

# Plugins
# if [[ -f "/home/linuxbrew/.linuxbrew/share/antigen/antigen.zsh" ]]; then
#  source /home/linuxbrew/.linuxbrew/share/antigen/antigen.zsh
#  antigen bundle zsh-users/zsh-completions
#  antigen bundle oknowton/zsh-dwim
#  antigen theme starship/starship
#  # antigen theme spaceship-prompt/spaceship-prompt
#  antigen bundle zsh-users/zsh-syntax-highlighting
#  # antigen bundle zsh-users/zsh-autosuggestions
#  # antigen bundle zsh-users/zsh-history-substring-search
#  antigen bundle marlonrichert/zsh-autocomplete
#  antigen apply
# fi

# Download Znap, if it's not there yet.
[[ -d ~/.config/zsh/repos/znap ]] || \
    git clone --depth 1 -- \
        https://github.com/marlonrichert/zsh-snap.git ~/.config/zsh/repos/znap

source ~/.config/zsh/repos/znap/znap.zsh  # Start Znap

znap install zsh-users/zsh-completions
znap install oknowton/zsh-dwim
znap install starship/starship
znap install zsh-users/zsh-syntax-highlighting
znap install zsh-users/zsh-autosuggestions
znap install zsh-users/zsh-history-substring-search
# znap install marlonrichert/zsh-autocomplete

znap source zsh-users/zsh-syntax-highlighting
znap source oknowton/zsh-dwim
znap source zsh-users/zsh-autosuggestions
#znap source marlonrichert/zsh-autocomplete
znap source zsh-users/zsh-history-substring-search

#znap prompt
#znap eval starship 'starship init zsh --print-full-init'
#znap prompt
# --- Custom Keybindings for zsh-autosuggestions, zsh-history-substring-search, and zsh-autocomplete ---

# Ensure ZLE is ready (usually not needed with plugin managers like znap)
# autoload -Uz zle && zle -N zle-line-init && zle -N zle-keymap-select

# --- zsh-autosuggestions ---
# Accept suggestion with Right Arrow.
# Note: 'forward-char' (which right arrow often sends) is usually in ZSH_AUTOSUGGEST_ACCEPT_WIDGETS by default.
# Explicit binding for clarity or if default doesn't work:
#bindkey "${terminfo[kcuf1]}" autosuggest-accept  # Right arrow (->) to accept suggestion

# --- zsh-autocomplete ---
# When zsh-autocomplete menu is active (keymap 'menuselect'):
# Up arrow to navigate up in the menu.
#bindkey -M menuselect "${terminfo[kcuu1]}" reverse-menu-complete
# Down arrow to navigate down in the menu.
#bindkey -M menuselect "${terminfo[kcud1]}" menu-complete
# Enter key to accept the selection from the menu and execute.
#bindkey -M menuselect '^M' .accept-line
# Shift-Tab in menu to navigate up (reverse cycle).
#bindkey -M menuselect "${terminfo[kcbt]}" reverse-menu-complete
# Escape key to close autocomplete menu without selection.
#bindkey -M menuselect '^[' send-break


# --- Custom Tab key behavior ---
# This custom widget handles Tab key presses:
# 1. If an autosuggestion is available, Tab accepts it.
# 2. If in zsh-autocomplete's menu, Tab selects the current item (inserts it without executing).
# 3. Otherwise, Tab triggers standard completion (which zsh-autocomplete uses).
_custom_tab_handler() {
  # First check if we're in the menuselect context
  if [[ "$CONTEXT" == "menuselect" ]]; then
    # In zsh-autocomplete's menu: Tab should "select (but not enter the command)"
    echo "insert-unambiguous-or-complete"
    zle insert-unambiguous-or-complete
    return
  fi
  
  # Check if there's an autosuggestion and accept it if present
  # Using the same widget that right arrow uses for consistency
  #if [[ -n "${POSTDISPLAY}" ]]; then
    # POSTDISPLAY contains the suggestion text that appears after cursor
    # This is more reliable than checking ZSH_AUTOSUGGEST_SUGGESTION
    # zle forward-word
  #  return
  #fi
  
  # No autosuggestion available, fall back to standard completion
  zle expand-or-complete
}
#zle -N _custom_tab_handler
#bindkey '^I' _custom_tab_handler # Bind Tab to the custom handler

# --- Custom Arrow Key Handlers for HSS and Autocomplete ---
_custom_down_arrow_handler() {
  # More reliable way to check if we're actively using history-substring-search
  # Only consider HSS active if we've explicitly used it via up arrow first
  # AND the current buffer exactly matches the last HSS result
  if [[ -n "$_history_substring_search_result" && \
        -n "$_history_substring_search_query" && \
        "$BUFFER" == "$_history_substring_search_result" && \
        "$LASTWIDGET" == "history-substring-search-up" ]]; then
    # We're actively cycling through HSS results, continue with HSS
    zle history-substring-search-down
  else
    # We're not in HSS, or HSS hasn't been activated yet
    # Always use menu-select to show the completion menu
    zle menu-select
  fi
}
#zle -N _custom_down_arrow_handler

# Bind Up arrow for HSS
bindkey '^[[A' history-substring-search-up
bindkey '^[OA' history-substring-search-up

# Bind Down arrow to our custom handler
bindkey '^[[B' history-substring-search-down
bindkey '^[OB' history-substring-search-down

# --- End of Custom Keybindings ---

HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE=1
HISTORY_SUBSTRING_SEARCH_FUZZY=1

EDITOR=nvim
ZSH_THEME="starship"
eval "$(starship init zsh)"
### bling.sh source start
# test -f /usr/share/ublue-os/bling/bling.sh && source /usr/share/ublue-os/bling/bling.sh
### bling.sh source end
autoload bashcompinit
bashcompinit
source "/var/home/tanc/.local/share/bash-completion/completions/appman"
export PATH="/usr/bin:$PATH"
